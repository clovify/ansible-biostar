#!/bin/bash

add_update_index_to_crontab () {
    # Write the update index task to crontab

    command="run-update-index.sh"
    crontab -l | grep $command
    res=`echo $?`
    # If:
    # res = 0 the command is already in the cron tab
    # res = 1 the command is not in the cron tab
    if [ "$res" -eq 1 ]; then
        echo " * Adding the update index command to the crontab..."
        # Every 10 mins.
        crontab -l | { cat; echo "*/10 * * * * {{ container_dir_for_codebase }}/$command"; } | crontab -

    else
        echo " * The update index command is already in the crontab..."
    fi
}

add_reset_db_to_crontab () {
    # Write the reset db task to crontab

    command="reset-db.sh"
    crontab -l | grep $command
    res=`echo $?`
    # If:
    # res = 0 the command is already in the cron tab
    # res = 1 the command is not in the cron tab
    if [ "$res" -eq 1 ]; then
        echo " * Adding the reset db command to the crontab..."
        # Every night at 4am.
        crontab -l | { cat; echo "00 04 * * * {{ container_dir_for_codebase }}/$command"; } | crontab -

    else
        echo " * The reset db command is already in the crontab..."
    fi
}

create_database () {
    # Create the database if not already existent

    echo " * Checking if the database already exists (this operation might give an error to be ignored)..."
    psql -h $PG_PORT_5432_TCP_ADDR -p $PG_PORT_5432_TCP_PORT -U {{ postgresql_username }} $DATABASE_NAME -c "SELECT id FROM users_user WHERE id=1;"
    res=`echo $?`
    # If:
    # res = 0 the database already exists
    # res != 0 the database does not exist
    if [ "$res" -eq 0 ]; then
        echo " * Database already existent..."
        newdb=1
    else
        echo " * Creating the database (this operation might give an error to be ignored)..."
        createdb -h $PG_PORT_5432_TCP_ADDR -p $PG_PORT_5432_TCP_PORT -U {{ postgresql_username }} $DATABASE_NAME
        newdb=0
    fi
}

fix_nginx_config_file () {
    # Fix Nginx biostar config file adding the right domain

    echo " * Adding $BIOSTAR_HOSTNAME to Nginx site config file for Biostar..."
    sed -ri "0,/^(\s*server_name [^ \t\r\n\v\f]+ )(xxxx);$/s//\1$BIOSTAR_HOSTNAME $BIOSTAR_EXTRA_HOSTNAMES;/" /etc/nginx/sites-enabled/biostar

    if  [[ $BIOSTAR_HOSTNAME == www.* ]]
    then
        WWW="www."
        CLEAN=${BIOSTAR_HOSTNAME#${WWW}}
        echo " * Adding $CLEAN to Nginx site config file for Biostar..."
        sed -ri "0,/^(\s*server_name )(xxxx);$/s//\1$CLEAN;/" /etc/nginx/sites-enabled/biostar
        sed -ri "0,/^(\s*rewrite \^\(\.\*\) http\:\/\/)(www.xxxx)(.?1 permanent);$/s//\1www.$CLEAN\3;/" /etc/nginx/sites-enabled/biostar
    else
        CLEAN=www.$BIOSTAR_HOSTNAME
        echo " * Adding $CLEAN to Nginx site config file for Biostar..."
        sed -ri "0,/^(\s*server_name )(xxxx);$/s//\1$CLEAN;/" /etc/nginx/sites-enabled/biostar
        sed -ri "0,/^(\s*rewrite \^\(\.\*\) http\:\/\/)(www.xxxx)(.?1 permanent);$/s//\1$BIOSTAR_HOSTNAME\3;/" /etc/nginx/sites-enabled/biostar
    fi

    echo " * Restarting nginx..."
    service nginx restart
}

chown_webapp_service () {
    # Give the user `www-data` the permission to control the Runit `webapp` service
    # So the userw root and www-data could start|stop the `webapp` service with:
    # `sv start|stop webapp`

    echo "Giving the use www-data the permission to manage the webapp service..."
    chmod 755 /etc/service/webapp/supervise
    chown www-data /etc/service/webapp/supervise/ok /etc/service/webapp/supervise/control /etc/service/webapp/supervise/status

}

cd {{ container_dir_for_codebase }}

echo " * Installing requirements..."
pip install -r conf/requirements/production.txt

echo " * Setting environment variables..."
source conf/production.env

# Create the database if not already existent
create_database

echo " * Migrating the database..."
if [ "$newdb" -eq 0 ]; then
    # A new database has just been created: we have to syncdb and migrate specific apps
    python manage.py syncdb -v 1 --noinput
    python manage.py migrate biostar.apps.users --noinput
    python manage.py migrate biostar.apps.posts --noinput
fi
# And run a regular migration (valid for both new and existen dbs)
python manage.py migrate --noinput

echo " * Initializing the database..."
# `initialize_site` is a idempotent operation, so it will have no effect on an existent db
python manage.py initialize_site

if [ "$newdb" -eq 0 ]; then
    # A new database has just been created and migrated: we have to load the fixture and rebuild the index
    {% if load_sample_data and load_sample_data != 'no' %}
    echo " * Loading sample data fixture..."
    python manage.py loaddata $JSON_DATA_FIXTURE
    {% endif %}
    echo " * Building the full text search index..."
    python manage.py rebuild_index --noinput
else
    echo " * Database already existent: skipping fixture import and index rebuild..."
fi

echo " * Collecting static files..."
python manage.py collectstatic --noinput

# Add the update index command to the crontab
add_update_index_to_crontab

# Add the script to reset the db every night
{% if nightly_reset_db and nightly_reset_db != 'no' %}
add_reset_db_to_crontab
{% endif %}

# Add the right domain to Nginx site config file
fix_nginx_config_file

# Give the user `www-data` the permission to control the Runit `webapp` service
chown_webapp_service

echo " * Running waitress web server on port 8000..."
chown -R www-data:www-data /srv/biostar
# TCP connection:
#exec /sbin/setuser www-data waitress-serve --port=8000 --call biostar.wsgi:white
# Unix socket connection:
exec /sbin/setuser www-data waitress-serve --unix-socket=/tmp/biostar.sock --call biostar.wsgi:white